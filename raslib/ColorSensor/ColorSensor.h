/**
 * @file ColorSensor.h
 * @details deigned for TM4C microcontroller. This driver/library allows you to initialize color sensors,
 *  update and read their RGBC values and set up interrupts for each color where you can set a low and 
 *  high data threshold.
 * @brief Low-level driver for TCS34725 color sensor
 * @author Dario Jimenez
 * @date 09/16/21
 * 
 *************************************************************************************************************
 *
 * TCS34725 Color Sensor information:
 *    - Vin pin: connect to the +5V or VBUS
 *    - GND pin: connect to ground
 *    - SCL pin: connect to a SCL pin on microcontroller
 *    - SDA pin: connect to a SDA pin on microcontroller
 * 
 **/

#pragma once

/* imports */
#include <stdint.h>
#include <lib/Timer/Timer.h>
#include <lib/I2C/I2C.h>

/**
 * @brief configuration to initialize Color Sensor
 **/
typedef struct ColorSensorConfig{

    /** The I2C module that will be used for the sensor
     * 
     **/
    I2CConfig_t I2CConfig;

    /** Boolean that indicates if color sensor will be periodically
     *  updated by an interrupt 
     * 
     **/
    bool isInterrupt;

    /** Frequency in Hz at which the interrupt will update the color sensor values
     * 
     * only applicable if isInterrupt is true 
     * 
     * @note: frequency should not be any higher than 250 Hz or the sensor might not
     *       not be able to work properly.
     **/
    int samplingFrequency;

    /** Timer that will be used to update color sensor values
     * 
     **/
    TimerID_t timerID;
    
}ColorSensorConfig_t;


/**
 * @brief Struct that is generated by ColorSensorInit that contains the
 *        most recently updated RGB values from color sensor.
 **/
typedef struct ColorSensor{

    /** I2C object for the color sensor **/
    I2C_t i2c;

    /** 16-bit value from color sensors' ADC **/
    uint16_t RedValue;
    uint16_t GreenValue;
    uint16_t BlueValue;
    uint16_t ClearValue;

}ColorSensor_t;

/**
 * @brief Initializes the TCS34725 color sensor
 * 
 * @param Configuration for color sensor
 * 
 * @return An ColorSensor_t instance that can be used for sampling/reading RGB values
 **/
ColorSensor_t ColorSensorInit(ColorSensorConfig_t config);

/**
 * @brief Samples/updates the RGBC values from color sensor 
 * 
 * @param ColorSensor_t instance passed as a pointer
 **/
void ColorSensorSample(ColorSensor_t * sensor);

/**
 * @brief Disabled interrupt for Color Sensor
 **/
void ColorSensorDisableInterrupt(ColorSensor_t sensor);

/**
 * @brief Enables interrupt for Color Sensor if an interrupt was initialized
 **/
void ColorSensorEnableInterrupt(ColorSensor_t sensor);

